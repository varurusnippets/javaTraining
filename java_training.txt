java features

Platform independent -- 

	Test.java (english) ---> Test.class (bytecode) Platform independent -- windows, linux 

Simple
	 Real objects

Secure
	
Architecture

Portable
	
Robust

Multi threaded
	
interpretation

High performance



Java Bytecode
	instruction to jvm, 
	
	binary --> assembly ( byte code) --> high level language
	
	
	java -->JIT (just in time) ---> .class
	
Till java11

.java --> .class --> run .class --> jvm(java virtual machine)

After java 11

 run .java 
 
 
 Platform independent, fast,Machine level
	
classpath --> class --> jvm ---> locations , jre/lib,

class loader
	
	Runtime ---
	
		class Loader --> Bytecode verifier ---> Interpretr ( Execute Bytecode, calls)--> Runtime --> Hardware
		
	

class Loader
			Loading, Linking ,Initialization
			
			.class -->
			Linking --> Verification, Preparation, Resolution
			
		Initialization
	Bootstrap classloader ( rt.jar)
	Extension class loader (jre/lib/ext)
	System/Application class loader (classpath)
	
Execution Engine --> interpertor and JIT, Garbage collector
JNI --> Java native interface


		
	interface calculator{
		public int add(int i, int j);
		
		public int subtract (int i, int j);


	}	
		
	class simpleCalc implements calculator{
	
		public int add(int i, int j){
			
			int c = i+j;
			
			return 10;
		}
		
		public int subtract (int i, int j){
			
			int c = i -j ;
			return c;
		}

	
	}


Java Data Types
===============

Primitive Data Types - int, boolean ,char, float, long, byte,short,double

Composite data type --> classes, interfaces, Arrays, Collections


			Numeric --> Character, 				Integral -->		Integer      					Floating point
							char							int, byte, shore ,long					float, double (decimal) 
Example
========
							
 4 bytes	int i =10;	
 4 bytes	float f = 10.5f;
 8 bytes	double d = 1.5;
 8 bytes	long l = 1000L;
 2 bytes	short s = 10;
 1 byte	byte b = 0;    0 or 1
 1 bit	boolean b = true;
 2 bytes	char ch = 'a';
 
 
 1byte --> 8 bits
 
 1 --> 0000 00001
 2-->  0000 00010
 
 127--> 1111 1111
 
 byte b = 129; // compilation error // 127, -1,-2
 
 Range 
 =======
 Boolean  -- true/false;
 byte --> -128 to 127   -  2^8 to 2^8-1
 short --> -32768 to 32767 - 2^16 to 2^16-1
 int --> -2^32 to 2^32 -1
 long --> -2^64 to 2^64 -1
 double --> -2^64 to 2^64 -1
 
 
 
 byte < short < int < long < Biginteger
 
 
 Operators
 =========
 
 
 Unary 
 Arthimetic
 Shift
 Relational
 Bitwise
 Logical
 Ternary Operators
 Assignment
 
 
 
 
 
 Unary
 =======
 
 ++
 --
 -
 ~
 !
 
 
 i++
 ++i 
 
 i =i+1;
 
 
 
 i =10;
 j =i++; // j = 10 // assign and increment,i =11
 
 
 i=10;
 k = ++i; // k = 11// increment and assign, i=11
 
 
 Arthimetic
 ==========
 
 +,-,*,/,%
 
 shift
 ======
 
 <<, >>, >>>
 
 3 << 1  --> 3 * 2^1 = 6
 
 10 << 2 --> 10 * 2 ^2 --> 10 *4 =40
 
 
 Relational
 =========
 
 >, <, >=, <=, ==, !=
 
 Bitwise
 ==========
 
 &, |, ^
  4& 2
  0100
 &0010
  =====
  0000
  =====
  
 Logical 
 ======
 
 &&, ||
 
 
 true && true ==> true
 false && true --> false
 
 true || false --> true
 
 Ternary
 ===============
 condition ? true statment : false statment
 j %2 ==1 ? "Odd Number" : "Even Number";
 
 
 Assigment
 ================
 
 =, // i=10;
 +=,  -=, *=, /=, %=, &=, ^=, |=, <<=, >>=,>>>=
 
 a +=5;
 
 a= a+5;
 
 
Flow control

====================

if,else, if

if( cond1){
	
	if(cond3){
	
	}


}else if( cond2){

}else{

}

Loops 

======

 For, While, do while, for each
 
 
 100 java classes
	10 -- functionality
	10- facing ui
	10- database connected
	10 -business logic
	 |
	 |
	 10- util
package a.b.c;

package will be the first line

import statements

class FileName{



}
 
 
 
 // static method can only consume static variables.
 
 // non static can use static variables
 
 OOPs (Object Oriented Progamming)
 ============
 
 class
 object
 Encapsulation
 Inheritance
 Polymorphism
 Abstraction
 
 
 
 blue print of class -- object
 
 new Student();
 
 
 student --> sno
 
 class Parent1{
 
	String surname;
	
	public String getFamilyHirearchy(){
	
	
	}
	
	
 }
 
 class Parent2{
	String surname;
	
	public String getFamilyHirearchy(){
	
	
	}
	
 
 }
 
 class Child extends Parent1{
 
	String fname;
	
 
 }
 
 
 
 Factory 
 ========
 
 Shape {
  
  draw()
 
 
 }
 
 
 circle extends Shape{
	draw(){
	
	}
 }
 
 
 square extends Shape{
	draw(){
	}
 
 }
 
 
 
drawMe(new Circle);
drawMe(new Square);
 
 
 public void drawMe(Shape s){
	s.draw();
 
 }
 
 Parent c = new Child();
 c.getSurName();
 
 Shape s = new Circle();
 s.draw(); // Circle draw
 
 Shape s = new Square();
 s.draw(); // square draw
 
 
 
 
 
Method Overloading
================
 
 same class
  same method name
  different parameter data types
  different number of parameters
 
 
 
 method overriding 
 ===================
 inheritance
	parent class and child class should have same signature ( return type, access modifier, method name and parameters)
	
 Constructor
 ====================
 
 
 creating an object of child == default constructor --> parent default constructor --> child default constructor
 
 creating an object of child with parameter --> parent default constructore --> child parameter constructor
 
 
 
 Cohesion and coupling
 =======
 
 Low --> behavior method  and High
 
 
 
 
 
 tight coupled
 
 High cohesion and loosely coupled
 
 
 interface
 ===================
 
 does not have method implementation
 static final
 
 calculator -- add, sub,mul,div
 
 
 abstract class
 ================
 
 5 methods
 
 4 methods are common, 1 method is changing (abstract)
 
 
 
 Arrays
 =================
 
 int i ; // single integer value
 
 multiple interger 
 
 array
 int[] iArr; // multiple integer value
 
 String[]
 Float[]
 
 |
 |
 |
 
 int[] arr = new int[5]; // create an entity, which can store 5 integers
 
 arr[0] = 1 // int default = 0, garbage
 
 arr[1] = 4
 
 
 
 
 String[] stArray = new String[2];
 
 stArray[0] = null;
 
 
 
 multi Dimension Arrays
 
 int[][] arr = new int[2][3]; m*n -> elements
 
 arr[0][0], arr[0][1], arr[0][2]
 arr[1][0], arr[1][1], arr[1][2]
 
 
 chess[8][8]
 
 
 rubikcube [][][]
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 










 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 























 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
	
	
	
	
	
	
	
	
	
	







		
		
		
		
		
		
		
		
		
		
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	