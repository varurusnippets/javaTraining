java features

Platform independent -- 

	Test.java (english) ---> Test.class (bytecode) Platform independent -- windows, linux 

Simple
	 Real objects

Secure
	
Architecture

Portable
	
Robust

Multi threaded
	
interpretation

High performance



Java Bytecode
	instruction to jvm, 
	
	binary --> assembly ( byte code) --> high level language
	
	
	java -->JIT (just in time) ---> .class
	
Till java11

.java --> .class --> run .class --> jvm(java virtual machine)

After java 11

 run .java 
 
 
 Platform independent, fast,Machine level
	
classpath --> class --> jvm ---> locations , jre/lib,

class loader
	
	Runtime ---
	
		class Loader --> Bytecode verifier ---> Interpretr ( Execute Bytecode, calls)--> Runtime --> Hardware
		
	

class Loader
			Loading, Linking ,Initialization
			
			.class -->
			Linking --> Verification, Preparation, Resolution
			
		Initialization
	Bootstrap classloader ( rt.jar)
	Extension class loader (jre/lib/ext)
	System/Application class loader (classpath)
	
Execution Engine --> interpertor and JIT, Garbage collector
JNI --> Java native interface


		
	interface calculator{
		public int add(int i, int j);
		
		public int subtract (int i, int j);


	}	
		
	class simpleCalc implements calculator{
	
		public int add(int i, int j){
			
			int c = i+j;
			
			return 10;
		}
		
		public int subtract (int i, int j){
			
			int c = i -j ;
			return c;
		}

	
	}


Java Data Types
===============

Primitive Data Types - int, boolean ,char, float, long, byte,short,double

Composite data type --> classes, interfaces, Arrays, Collections


			Numeric --> Character, 				Integral -->		Integer      					Floating point
							char							int, byte, shore ,long					float, double (decimal) 
Example
========
							
 4 bytes	int i =10;	
 4 bytes	float f = 10.5f;
 8 bytes	double d = 1.5;
 8 bytes	long l = 1000L;
 2 bytes	short s = 10;
 1 byte	byte b = 0;    0 or 1
 1 bit	boolean b = true;
 2 bytes	char ch = 'a';
 
 
 1byte --> 8 bits
 
 1 --> 0000 00001
 2-->  0000 00010
 
 127--> 1111 1111
 
 byte b = 129; // compilation error // 127, -1,-2
 
 Range 
 =======
 Boolean  -- true/false;
 byte --> -128 to 127   -  2^8 to 2^8-1
 short --> -32768 to 32767 - 2^16 to 2^16-1
 int --> -2^32 to 2^32 -1
 long --> -2^64 to 2^64 -1
 double --> -2^64 to 2^64 -1
 
 
 
 byte < short < int < long < Biginteger
 
 
 Operators
 =========
 
 
 Unary 
 Arthimetic
 Shift
 Relational
 Bitwise
 Logical
 Ternary Operators
 Assignment
 
 
 
 
 
 Unary
 =======
 
 ++
 --
 -
 ~
 !
 
 
 i++
 ++i 
 
 i =i+1;
 
 
 
 i =10;
 j =i++; // j = 10 // assign and increment,i =11
 
 
 i=10;
 k = ++i; // k = 11// increment and assign, i=11
 
 
 Arthimetic
 ==========
 
 +,-,*,/,%
 
 shift
 ======
 
 <<, >>, >>>
 
 3 << 1  --> 3 * 2^1 = 6
 
 10 << 2 --> 10 * 2 ^2 --> 10 *4 =40
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
	
	
	
	
	
	
	
	
	
	







		
		
		
		
		
		
		
		
		
		
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	